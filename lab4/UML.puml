@startuml Lab4_prog

/'--------------------------------
|             Enums              |
--------------------------------'/


enum CosmicObjectType {
    STAR
    ASTEROID
    PLANET
    GALAXY
    SATALITE
}


/'--------------------------------
|           PlanetObject         |
--------------------------------'/


abstract class PlanetObject {
    - String name
    + getName()
    + getViewPoint()
}

class Rocket extends PlanetObject implements Shine {
    - name = Rocket
    - weight = 300 000
    + Rocket()
    + getView() 
    + getWeight()
}

note right of Rocket::"getView()"
    виднелась
end note

class Cave extends PlanetObject {
    - name = Cave
    + Cave()
}

class SpaceSuit extends PlanetObject {
    - name = SpaceSuit
    - weight = 130
    + SpaceSuit()
    + getWeight()
}

class Mountains extends PlanetObject {
    - name = Mountains
    + Mountains()
}



/'--------------------------------
|           Interfaces           |
--------------------------------'/


interface Sound {
    + void sound()
}

interface Shine {
    + void shine()
}

interface Affect {
    + String affect()
}

interface Lightable {
    + String light(int light)
}

interface Reflectable {
    + String reflect(int otherLight)
}   

interface Viewable {
    + String getView(CosmicObject viewPoint)
}

interface Imagine {
    + void imagine()
}


/'--------------------------------
|           SpaceStuff           |
--------------------------------'/


CosmicObject -- CosmicObjectType
abstract class CosmicObject implements Lightable, Reflectable {
    - int brightness
    - String name    
    - double radius
    - double mass
    - CosmicObjectType type
    - String time

    + CosmicObject(String name, CosmicObjectType type)
    + CosmicObject(String name, double radius, double mass, CosmicObjectType type, int brightness, String time)

    + getViewPoint()
    + getTime()
    + setTime(String time)
    + getName()
    + light()
    + reflect()
    + getRadius()
    + getMass()
    + getType()
    + getBrightness()
    
}

class CosmicBeam extends CosmicObject implements Affect {
    - CosmicObjectType type = COSMICBEAM
    + CosmicBeam(String name)
    + light(int light)
    + reflect(int otherLight)
    + affect(int affect, CosmicObject surface)
    /' Поверхность луны светится под воздействием солнечных лучей '/
}

note top of CosmicBeam
THIS IS LOCAL CLASS!

affect(int affect, CosmicObject surface) {
    class GiveSpecialAbility {
        private int affect;
        private CosmicObject surface;

        public GiveSpecialAbility(int affect, CosmicObject surface) {
            this.affect = affect;
            this.surface = surface;
        }

        public String findOutSpecialAbility() {
            if (surface.getName() == "Moon" && affect > 0) {
                return surface.getName() + " Обладает способностью светиться с силой " + affect.toInt();
            } 
            return "Космические лучи действуют на всех людей на " + surface.getName() + " с силой " + affect.toInt();
        } 
    }
    GiveSpecialAbility ability = new GiveSpecialAbility(affect, surface);
    return ability.findOutSpecialAbility();
}
end note

class Earth extends CosmicObject {
    - type = PLANET
    - brightness = 2
    - name = Earth
    - mass = 5.9742 * 10^24
    - radius = 6371

    + Earth()
    + light(int light)
    + reflect(int otherLight)
    + diskShine()
}

class Constellations extends CosmicObject implements Shine{
    - CosmicObjectType type = CONSTELLATIONS
    + Constellations(String name)
    + light(int light)
    + reflect(int otherLight)
}

Earth -- Shine

note bottom of Earth
THIS IS ANONYMOUS CLASS!

public static diskShine() {
    Shine disk = new Shine() {
        @ Override
        public void shine() {
            return sout("светящийся диск");
        }
    };
    disk.shine()
} 
end note

class Firmament extends CosmicObject {
    - CosmicObjectType type = FIRMAMENT
    + Firmament(String name)
    + light(int light)
    + reflect(int otherLight)

}

class Sun extends CosmicObject {
    - type = STAR
    - name = Sun
    - brightness = 50
    - radius = 696 340
    - mass = 1.98892 * 10^30
    + Sun()
    + light(int light)
    + reflect(int otherLight)
}
class Moon extends CosmicObject implements Sound{
    - type = SATALITE
    - brightness = 1
    - name = Moon
    - mass = 7.36 * 10^22
    - radius = 1737.4
    + Moon()
    + light(int light)
    + reflect(int otherLight)
    + sound()
}

class Sky implements Viewable {
    - name = Sky
    + Sky()
    + getName()
    + getView(CosmicObject viewPoint)

}


/'--------------------------------
|            Togethers           |
--------------------------------'/


together {
    class Human 
    class Ore
    class Instruments
}

together {
    class Human
    class Color
}

together {
    class DoctorPillulkin
    class Fuksy
    class Znaika
    class Neznaika
    class ProfessorZvizdochkin
    class Seledochka
}


/'--------------------------------
|            Tricolor            |
--------------------------------'/


enum Color {
    - String name
    + Color(String name)
    + getName()
    BLACK
    WHITE
    BLUE
    RED
    LIGHTCHERRY
    PURPLE
    DARKPURPLE
    EMERALDGREEN 
    GREEN 
    BRIGHTBLUE 
}


/'--------------------------------
|           HumanStuff           |
--------------------------------'/


abstract class Human implements Viewable{
    - String name
    - CosmicObject cosmicLocation
    - PlanetObject planetLocation

    + Human(String name, CosmicObject cosmiclocation, PlanetObject planetLocation)
    + getName()
    + getCosmicLocation()
    + setCosmicLocation()
    + getPlanetLocation()
    + setPlanetLocation()
    + see(Viewable target, CosmicObject viewPoint)
    + read()
    + write()
    + draw()
    + feelBad()
    + feelGood()
    + say()
    + takeOff(String objectName)
    + putOn(String objectName)
    + stay(String place) /' не выходить из place '/
    + goOutside(String place) /' выходить из place '/
    + go()
}

note right of Astronauts
THIS IS ANONYMOUS CLASS!

public static someone() {
    Imagine someone = new Imagine() {
        @ Override
        public void imagine() {
            return sout("Кто-то воображает");
        }
    };
    someone.imagine();
}
end note

class Astronauts extends Human{
    - name
    + everyone()
    + sendTo(String name)
    + mine()
}

Astronauts -- Znaika
Astronauts -- Neznaika
Astronauts -- ProfessorZvizdochkin
Astronauts -- Seledochka
Astronauts -- DoctorPillulkin
Astronauts -- Fuksy

class Znaika {
    - name = Znayka
    + Znayka()
    + see(Viewable target)
    + read()
    + write()
    + draw()
    + command(String command) /' отдал распоряжение command'/
}

class Fuksy {
    - name = Fuksy
    + Fuksy()
    + see(Viewable target)
    + read()
    + write()
    + draw()
}

class Seledochka {
    - name = Seledochka
    + Seledochka()
    + see(Viewable target)
    + read()
    + write()
    + draw()
}

class ProfessorZvizdochkin {
    - name = ProfessorZvizdochkin
    + ProfessorZvizdochkin()
    + see(Viewable target)
    + read()
    + write()
    + draw()
}

class Neznaika {
    - name = Neznaika
    + Neznaika()
}

class DoctorPillulkin {
    - name = DoctorPillulkin
    + DoctorPillulkin()
}


/'--------------------------------
|               Ore              |
--------------------------------'/


abstract class Ore {
    - String type
    + getType()
}

class Lunit extends Ore {
    - name = Lunit
    + Lunit()
}

class AntiLunit extends Ore {
    - name = AntiLunit
    + AntiLunit()
}


/'--------------------------------
|          Instruments           |
--------------------------------'/


abstract class Instruments {
    - String type
    + getType()
    + bang()
}

class IceAxe extends Instruments {
    - name = IceAxe
    + IceAxe()
}

class GeoHammer extends Instruments {
    - name = GeoHammer
    + GeoHammer()
}
